name: Publish to PyPI

# This workflow supports two publishing modes:
# 1. Manual TestPyPI: Use workflow_dispatch with a version (e.g., 1.0.1-rc1)
#    - Updates version using ./scripts/version.sh
#    - Publishes to TestPyPI for testing
#    - Tests installation with pip, pipx, and uv (with --pre flag for pre-releases)
# 2. Automatic PyPI: Triggered by GitHub releases
#    - Verifies version consistency across files
#    - Publishes to production PyPI (stable versions only)
#    - Tests installation with all package managers (no --pre flag)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish to TestPyPI (e.g., 1.0.1-rc1)'
        required: true
        default: '1.0.1-rc1'

# Security: No default permissions - each job specifies its own
permissions: {}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Required to checkout repository contents
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   # v4.2.2
    
    - name: Install uv
      uses: astral-sh/setup-uv@d9e0f98d3fc6adb07d1e3d37f3043649ddad06a1 # v6.5.0
      with:
        enable-cache: true
        cache-suffix: "test"
        version: "0.8.12"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Run tests
      run: uv run pytest -v
    
    - name: Run linting
      run: |
        uv run ruff check keychecker/ tests/
        uv run ruff format --check keychecker/ tests/
    
    - name: Run type checking
      run: uv run mypy keychecker/

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write  # Required for uploading artifacts
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   # v4.2.2
    
    - name: Install uv
      uses: astral-sh/setup-uv@d9e0f98d3fc6adb07d1e3d37f3043649ddad06a1 # v6.5.0
      with:
        enable-cache: true
        cache-suffix: "build"
        version: "0.8.12"
    
    - name: Set up Python
      run: uv python install 3.9  # Use minimum supported version for build
    
    - name: Install build dependencies
      run: uv tool install twine
    
    - name: Build package
      run: uv build
    
    - name: Check package
      run: uv tool run twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
      with:
        name: dist
        path: dist/

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: read  # Required to checkout repository contents
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   # v4.2.2
    
    - name: Install uv
      uses: astral-sh/setup-uv@d9e0f98d3fc6adb07d1e3d37f3043649ddad06a1 # v6.5.0
      with:
        enable-cache: true
        cache-suffix: "publish-testpypi"
        version: "0.8.12"
    
    - name: Set up Python
      run: uv python install 3.9  # Use minimum supported version for build
    
    - name: Install build dependencies
      run: uv tool install twine
    
    - name: Build package
      run: uv build
    
    - name: Install pipx for testing
      run: |
        python -m pip install --user pipx
        python -m pipx ensurepath
    
    - name: Update version for TestPyPI
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "üîÑ Updating version to ${{ github.event.inputs.version }} for TestPyPI..."
        chmod +x ./scripts/version.sh
        ./scripts/version.sh ${{ github.event.inputs.version }}
    
    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TESTPYPI_API_TOKEN }}
      run: uv tool run twine upload --repository testpypi dist/*
    
    - name: Test installation methods from TestPyPI
      run: |
        echo "üß™ Testing installation with multiple package managers..."
        
        # Test 1: pip in virtual environment (most common method)
        echo "üì¶ Testing with pip in venv..."
        python -m venv test-pip-env
        source test-pip-env/bin/activate
        pip install --pre --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ keychecker
        PIP_VERSION=$(keychecker --version | awk '{print $2}')
        keychecker --help > /dev/null
        deactivate
        rm -rf test-pip-env
        echo "‚úÖ pip installation test passed (version: $PIP_VERSION)"

        # Test 2: pipx (isolated global installation)
        echo "üì¶ Testing with pipx..."
        pipx install --index-url https://test.pypi.org/simple/ --pip-args="--pre --extra-index-url https://pypi.org/simple/" keychecker
        PIPX_VERSION=$(keychecker --version | awk '{print $2}')
        keychecker --help > /dev/null
        pipx uninstall keychecker
        echo "‚úÖ pipx installation test passed (version: $PIPX_VERSION)"

        # Test 3: uv (modern fast installer)
        echo "üì¶ Testing with uv..."
        uv init --no-readme --no-workspace test-uv-project
        cd test-uv-project
        uv add --pre --default-index https://test.pypi.org/simple/ --index https://pypi.org/simple/  --index-strategy unsafe-best-match keychecker
        uv sync --pre --default-index https://test.pypi.org/simple/ --index https://pypi.org/simple/  --index-strategy unsafe-best-match
        UV_VERSION=$(uv run --pre --default-index https://test.pypi.org/simple/ --index https://pypi.org/simple/ --index-strategy unsafe-best-match keychecker --version | awk '{print $2}')
        uv run --pre --default-index https://test.pypi.org/simple/ --index https://pypi.org/simple/ --index-strategy unsafe-best-match keychecker --help > /dev/null
        cd ..
        rm -rf test-uv-project
        echo "‚úÖ uv installation test passed (version: $UV_VERSION)"
        
        # Verify all installed versions match the uploaded version
        UPLOADED_VERSION="${{ github.event.inputs.version }}"
        
        echo "üîç Verifying installed versions match uploaded version..."
        echo "üìã Expected uploaded version: $UPLOADED_VERSION"
        echo "üìã pip installed version: $PIP_VERSION"
        echo "üìã pipx installed version: $PIPX_VERSION"
        echo "üìã uv installed version: $UV_VERSION"
        
        if [ "$PIP_VERSION" != "$UPLOADED_VERSION" ] || [ "$PIPX_VERSION" != "$UPLOADED_VERSION" ] || [ "$UV_VERSION" != "$UPLOADED_VERSION" ]; then
            echo "‚ùå Error: Version mismatch detected in installed packages!"
            echo "   Expected: $UPLOADED_VERSION"
            echo "   pip: $PIP_VERSION"
            echo "   pipx: $PIPX_VERSION"
            echo "   uv: $UV_VERSION"
            echo ""
            echo "üí° This indicates a problem with the TestPyPI publication or package installation."
            exit 1
        fi
        
        echo "‚úÖ All installed versions match the uploaded version: $UPLOADED_VERSION"
        echo "üéâ All installation methods tested successfully and version matches!"
        

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: read  # Required to checkout repository contents
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   # v4.2.2
    
    - name: Install uv
      uses: astral-sh/setup-uv@d9e0f98d3fc6adb07d1e3d37f3043649ddad06a1 # v6.5.0
      with:
        enable-cache: true
        cache-suffix: "publish-pypi"
        version: "0.8.12"
    
    - name: Set up Python
      run: uv python install 3.9  # Use minimum supported version for build
    
    - name: Install build dependencies
      run: |
        uv tool install twine
        python -m pip install --user pipx
        python -m pipx ensurepath
    
    - name: Build package
      run: uv build
    
    - name: Verify version consistency
      if: github.event_name == 'release'
      run: |
        echo "üîç Verifying version consistency for release..."
        
        # Extract release version from GitHub release tag
        RELEASE_VERSION="${{ github.event.release.tag_name }}"
        # Remove 'v' prefix if present (e.g., v1.0.5 -> 1.0.5)
        RELEASE_VERSION=${RELEASE_VERSION#v}
        
        echo "üìã Release version: $RELEASE_VERSION"
        
        # Get version from pyproject.toml
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "üìã pyproject.toml version: $PYPROJECT_VERSION"
        
        # Get version from __init__.py
        INIT_VERSION=$(uv run python -c "import keychecker; print(keychecker.__version__)")
        echo "üìã __init__.py version: $INIT_VERSION"
        
        # Check if all versions match
        if [ "$RELEASE_VERSION" != "$PYPROJECT_VERSION" ] || [ "$RELEASE_VERSION" != "$INIT_VERSION" ]; then
            echo "‚ùå Error: Version mismatch detected!"
            echo "   Release tag: $RELEASE_VERSION"
            echo "   pyproject.toml: $PYPROJECT_VERSION"
            echo "   __init__.py: $INIT_VERSION"
            echo ""
            echo "üí° Please ensure all version strings match the release tag."
            echo "   You can use: ./scripts/version.sh $RELEASE_VERSION"
            exit 1
        fi
        
        echo "‚úÖ All versions match: $RELEASE_VERSION"
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: uv tool run twine upload dist/*
    
    - name: Verify publication with multiple installation methods
      run: |
        echo "üß™ Verifying PyPI publication with multiple package managers..."
        
        # Test 1: pip in virtual environment (most common method)
        echo "üì¶ Testing with pip in venv..."
        python -m venv verify-pip-env
        source verify-pip-env/bin/activate
        pip install keychecker
        PIP_VERSION=$(keychecker --version | awk '{print $2}')
        keychecker --help > /dev/null
        deactivate
        rm -rf verify-pip-env
        echo "‚úÖ pip installation verification passed (version: $PIP_VERSION)"
        
        # Test 2: pipx (isolated global installation)
        echo "üì¶ Testing with pipx..."
        pipx install keychecker
        PIPX_VERSION=$(keychecker --version | awk '{print $2}')
        keychecker --help > /dev/null
        pipx uninstall keychecker
        echo "‚úÖ pipx installation verification passed (version: $PIPX_VERSION)"
        
        # Test 3: uv (modern fast installer)
        echo "üì¶ Testing with uv..."
        uv init --no-readme --no-workspace verify-uv-project
        cd verify-uv-project
        uv add keychecker
        UV_VERSION=$(uv run keychecker --version | awk '{print $2}')
        uv run keychecker --help > /dev/null
        cd ..
        rm -rf verify-uv-project
        echo "‚úÖ uv installation verification passed (version: $UV_VERSION)"
        
        # Verify all installed versions match the release version
        RELEASE_VERSION="${{ github.event.release.tag_name }}"
        RELEASE_VERSION=${RELEASE_VERSION#v}  # Remove 'v' prefix if present
        
        echo "üîç Verifying installed versions match release version..."
        echo "üìã Expected release version: $RELEASE_VERSION"
        echo "üìã pip installed version: $PIP_VERSION"
        echo "üìã pipx installed version: $PIPX_VERSION"
        echo "üìã uv installed version: $UV_VERSION"
        
        if [ "$PIP_VERSION" != "$RELEASE_VERSION" ] || [ "$PIPX_VERSION" != "$RELEASE_VERSION" ] || [ "$UV_VERSION" != "$RELEASE_VERSION" ]; then
            echo "‚ùå Error: Version mismatch detected in installed packages!"
            echo "   Expected: $RELEASE_VERSION"
            echo "   pip: $PIP_VERSION"
            echo "   pipx: $PIPX_VERSION"
            echo "   uv: $UV_VERSION"
            echo ""
            echo "üí° This indicates a problem with the PyPI publication or package installation."
            exit 1
        fi
        
        echo "‚úÖ All installed versions match the release version: $RELEASE_VERSION"
        echo "üéâ All installation methods verified successfully!"
